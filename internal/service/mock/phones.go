// Code generated by MockGen. DO NOT EDIT.
// Source: phones.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "phone-directory/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPhoneService is a mock of PhoneService interface.
type MockPhoneService struct {
	ctrl     *gomock.Controller
	recorder *MockPhoneServiceMockRecorder
}

// MockPhoneServiceMockRecorder is the mock recorder for MockPhoneService.
type MockPhoneServiceMockRecorder struct {
	mock *MockPhoneService
}

// NewMockPhoneService creates a new mock instance.
func NewMockPhoneService(ctrl *gomock.Controller) *MockPhoneService {
	mock := &MockPhoneService{ctrl: ctrl}
	mock.recorder = &MockPhoneServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhoneService) EXPECT() *MockPhoneServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPhoneService) Create(ctx context.Context, u *entities.Phone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPhoneServiceMockRecorder) Create(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPhoneService)(nil).Create), ctx, u)
}

// Delete mocks base method.
func (m *MockPhoneService) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPhoneServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPhoneService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPhoneService) Get(ctx context.Context, id uint) (*entities.Phone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entities.Phone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPhoneServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPhoneService)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockPhoneService) Update(ctx context.Context, u *entities.Phone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPhoneServiceMockRecorder) Update(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPhoneService)(nil).Update), ctx, u)
}
