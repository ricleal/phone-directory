// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	repository "phone-directory/internal/repository"
	store "phone-directory/internal/store"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Addresses mocks base method.
func (m *MockStore) Addresses() repository.AddressRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addresses")
	ret0, _ := ret[0].(repository.AddressRepository)
	return ret0
}

// Addresses indicates an expected call of Addresses.
func (mr *MockStoreMockRecorder) Addresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addresses", reflect.TypeOf((*MockStore)(nil).Addresses))
}

// ExecTx mocks base method.
func (m *MockStore) ExecTx(ctx context.Context, fn func(store.Store) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockStoreMockRecorder) ExecTx(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockStore)(nil).ExecTx), ctx, fn)
}

// Phones mocks base method.
func (m *MockStore) Phones() repository.PhoneRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Phones")
	ret0, _ := ret[0].(repository.PhoneRepository)
	return ret0
}

// Phones indicates an expected call of Phones.
func (mr *MockStoreMockRecorder) Phones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Phones", reflect.TypeOf((*MockStore)(nil).Phones))
}

// Users mocks base method.
func (m *MockStore) Users() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockStoreMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockStore)(nil).Users))
}
